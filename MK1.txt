library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;

entity CPU is
    Port ( address : in STD_LOGIC_VECTOR (7 downto 0);
           data_in : in STD_LOGIC_VECTOR (7 downto 0);
           data_out : out STD_LOGIC_VECTOR (7 downto 0);
           clk : in STD_LOGIC);
end CPU;

architecture Behavioral of CPU is

-- Declare register A and B
type reg is array( 0 to 15) of std_logic_vector(7 downto 0);
signal A_reg : reg := ( others => x"00");
signal B_reg : reg := (others => x"00");

-- Declare Rom type 
constant NUL : std_logic_vector(7 downto 0)  := x"00";
constant LDAA : std_logic_vector(7 downto 0) := x"01";
constant LDAB : std_logic_vector(7 downto 0) := x"02";
constant STAA : std_logic_vector(7 downto 0) := x"03";
constant STAB : std_logic_vector(7 downto 0) := x"04";
type ROM_Type is array( 0 to 15) of std_logic_vector(7 downto 0);
signal Rom : Rom_type := ( 0 => NUL,
                            1 => LDAA,
                            2 => LDAB,
                            3 => STAA,
                            4 => STAB,
                             others => x"00");
signal inst : std_logic_vector( 7 downto 0);

-- RW memory 
type memory_type is array( 16 to 31 ) of std_logic_vector( 7 downto 0);
signal memory : memory_type := (others=> x"00"); 
signal RE_EN : std_logic;
signal WR_EN : std_logic;

begin

enable: process(WR_EN)
begin 
if (to_integer(unsigned(address)) >= 16 or  to_integer(unsigned(address)) <= 31) then 
wr_en <= '1';
else
wr_en <= '0';
end if;
end process enable;

instr : process(clk)
begin 
end process instr;

end Behavioral;
